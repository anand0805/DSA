class Solution {
public:
    vector<int> count;
    vector<int> dist;
    
    
    int makeCountArray(int src, vector<vector<int>>& graph, vector<int> &vis){
        vis[src] = 1;
        
        for(int nbr: graph[src]){
            
            if(vis[nbr] == 0){
                count[src] += makeCountArray(nbr, graph, vis);
            }
        }
        count[src] += 1;
        return count[src];
        
    }
    
    void fillDistForSrc(int src,vector<vector<int>>& graph, vector<int> &vis){
        vis[src] = 1;
        queue<int> q;
        q.push(src);
        int ans = 0;
        int level = 0;
        while(q.size()){
             int sz = q.size();
            
           
            while(sz--){
            ans+=level;
            int rem = q.front();
            q.pop();
           
            for(int nbr: graph[rem]){
                if(vis[nbr] == 0){
                     vis[nbr] = 1;
                    q.push(nbr);
                }
            }
           
            }
            level++;
            
            
        }
        dist[src] = ans;
       
        
    }
    
    void calcAns(int src,  vector<vector<int>>& graph, int n, vector<int> &vis){
        //for every node dist[node] = dist[parent] - count[node] + (n - count[node])
        
        vis[src] = 1;
        queue<int> q;
        q.push(src);
        
        while(q.size()){
             int sz = q.size();
            
           
            while(sz--){
            int rem = q.front();
            q.pop();
           
            for(int nbr: graph[rem]){
                if(vis[nbr] == 0){
                     vis[nbr] = 1;
                    dist[nbr] = dist[rem] - count[nbr] + n - count[nbr];
                    q.push(nbr);
                }
            }
           
            }
        
            
            
        }
        
    }
    
    
    vector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {
        vector<vector<int>> graph(n);
        
        for(int i = 0; i < edges.size(); i++){
            graph[edges[i][0]].push_back(edges[i][1]);
            graph[edges[i][1]].push_back(edges[i][0]);
        }
        //step 1: make count array - which stores how many subtrees from each node
        
        count.resize(n);
        vector<int> vis1(n,0);
        
        makeCountArray(0, graph, vis1);
        
       
        //step 2: fill dist array for src
        
        dist.resize(n);
        vector<int> vis2(n,0);
        fillDistForSrc(0, graph, vis2);
        
        
        //step 3: calculate answer for all nodes
        vector<int> vis3(n,0);
        calcAns(0, graph, n, vis3);
        
        return dist;
    }
};
